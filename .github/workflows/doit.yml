name: Update data & upload

on:
  push:
    branches: [ "main", "dev" ]
  schedule:
    - cron: "29 * * * *"
  workflow_dispatch:

permissions:
  contents: read

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.12' }}
  ACTOR_IS_OWNER: ${{ github.actor == github.repository_owner }}

concurrency:
  group: ${{ github.head_ref || github.ref || github.run_id }}-${{ github.actor || github.repository_owner }}
  cancel-in-progress: ${{ ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.actor == github.repository_owner }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: pip cache
        uses: actions/cache@v4
        if: ${{ env.ACTOR_IS_OWNER == 'true' }}
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --max-line-length=127 --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    runs-on: ubuntu-latest
    needs: [ lint ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: pip cache
        uses: actions/cache@v4
        if: ${{ env.ACTOR_IS_OWNER == 'true' }}
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest poetry
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Setup pypoetry cache
        uses: actions/cache@v4
        if: ${{ env.ACTOR_IS_OWNER == 'true' }}
        timeout-minutes: 5
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pypoetry-${{ hashFiles('**/requirements.txt') }}${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pypoetry-

      - name: Run Poetry
        run: |
          python -m poetry install --no-root

      - name: Lint with flake8
        run: |
          flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Get current week news
        run: |
          mkdir -p 'ecs' &&
          python -m poetry run python get_current_week_news.py > ecs/news.json

      - name: Upload News Artifact
        uses: actions/upload-artifact@v4
        with:
          name: news
          path: ecs
          retention-days: 1

  test-data:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Download news artifact
        uses: actions/download-artifact@v2
        with:
          name: news
          path: '${{ github.workspace }}/ecs'

      - name: Test news data
        run: |
          ls -lah
          DATA_PATH=ecs/news.json python test_news_data.py

  deploy:
    runs-on: ubuntu-latest
    needs: [ test-data ]
    if: ${{ github.actor == github.repository_owner && ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') }}

    steps:
      - name: Download news artifact
        uses: actions/download-artifact@v2
        with:
          name: news
          path: '${{ github.workspace }}/ecs'

      - name: Push directory to another repository
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        if: ${{ env.ACTOR_IS_OWNER == 'true' }}
        with:
          source-directory: ecs
          destination-github-username: ${{ env.DESTINATION_REPOSITORY_USERNAME || vars.DESTINATION_REPOSITORY_USERNAME || 'maxisoft-data' }}
          user-name: ${{ github.actor }}
          user-email: ${{ github.actor }}@users.noreply.github.com
          destination-repository-name: ${{ env.DESTINATION_REPOSITORY_NAME || vars.DESTINATION_REPOSITORY_NAME || 'economy-calendar' }}
          create-target-branch-if-needed: ${{ vars.DEPLOY_TO_REPOSITORY_CREATE_TARGET_BRANCH_IF_NEEDED || true }}
          target-branch: ${{ env.DEPLOY_TO_REPOSITORY_TARGET_BRANCH || vars.DEPLOY_TO_REPOSITORY_TARGET_BRANCH || 'main' }}
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
